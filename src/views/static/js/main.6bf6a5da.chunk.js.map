{"version":3,"sources":["components/Footer/Footer.tsx","components/Navbar/Navbar.tsx","components/HomeContent/HomeContent.tsx","pages/Home.tsx","components/RegisterContent/RegisterContent.tsx","pages/Register.tsx","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["Footer","target","rel","href","Navbar","onClick","theme","$","attr","prefersDarkMode","window","matchMedia","matches","console","info","HomeContent","className","src","alt","Home","RegisterContent","htmlFor","type","name","placeholder","required","Register","App","path","element","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2MAiBeA,MAff,WACE,OACE,iCACE,+CACa,IACX,mBAAGC,OAAO,SAASC,IAAI,aAAaC,KAAK,oCAAzC,SACE,iCACE,yD,gCCuCGC,MA3Cf,WAgBE,OACE,gCACE,6BACE,6BACE,uDAGJ,+BACE,6BACE,mBACEH,OAAO,SACPE,KAAK,8CACLD,IAAI,aAHN,SAKE,cAAC,IAAD,QAGJ,6BACE,mBAAGC,KAAK,aAAaE,QAjC7B,WACE,IAAMC,EAAgBC,IAAE,QAAQC,KAAK,cAC/BC,EACJC,OAAOC,YAAcD,OAAOC,WAAW,gCAAgCC,QAE3D,SAAVN,EAAkBC,IAAE,QAAQC,KAAK,aAAc,SAChC,UAAVF,EAAmBC,IAAE,QAAQC,KAAK,aAAc,QAEvDC,EACIF,IAAE,QAAQC,KAAK,aAAc,SAC7BD,IAAE,QAAQC,KAAK,aAAc,QAEnCK,QAAQC,KAAKP,IAAE,QAAQC,KAAK,gBAqBtB,SACE,cAAC,IAAD,e,eCRGO,MA9Bf,WACE,OACE,oCAEE,oBAAIC,UAAU,OAAd,oBACA,qBAAIA,UAAU,OAAd,wCAC6B,mBAAGb,KAAK,0BAAR,yBAD7B,sBAEU,0CAFV,OAEiC,6CAFjC,OAIA,qBAAKa,UAAU,MAAMC,IAAI,+BAA+BC,IAAI,WAC5D,qGAEA,uBAGA,oBAAIF,UAAU,OAAd,oBACA,oBAAIA,UAAU,OAAd,oDACA,4BACE,2HAEiB,IACf,qBAAKA,UAAU,MAAMC,IAAI,+BAA+BC,IAAI,gBAIhE,2BCVSC,MAdf,WACE,OACE,gCAEE,mCACE,oBAAIH,UAAU,OAAd,2BACA,oFAEF,uBACA,cAAC,EAAD,QCOSI,MAjBf,WACE,OACE,kCACE,uBAAMJ,UAAU,OAAhB,UACE,uBAAOK,QAAQ,QAAf,0CACA,uBACEC,KAAK,OACLC,KAAK,sBACLC,YAAY,wBACZC,UAAQ,IAEV,wBAAQH,KAAK,SAAb,0BCIOI,MAdf,WACE,OACE,gCAEE,mCACE,oBAAIV,UAAU,OAAd,2BACA,2DAEF,uBACA,cAAC,EAAD,QCWSW,MAff,WACE,OACE,sBAAKX,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOY,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,YAAYC,QAAS,cAAC,EAAD,WAGrC,cAAC,EAAD,QCNcC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.6bf6a5da.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer>\n      <small>\n        Credits to{\" \"}\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/Muhammed-Rahif\">\n          <strong>\n            <u>Muhammed Rahif</u>\n          </strong>\n        </a>\n      </small>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { SiGithub } from \"react-icons/si\";\nimport { MdDarkMode } from \"react-icons/md\";\nimport $ from \"jquery\";\n\nfunction Navbar() {\n  function toggleTheme(): void {\n    const theme: string = $(\"html\").attr(\"data-theme\") as string;\n    const prefersDarkMode: boolean =\n      window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n\n    if (theme === \"dark\") $(\"html\").attr(\"data-theme\", \"light\");\n    else if (theme === \"light\") $(\"html\").attr(\"data-theme\", \"dark\");\n    else\n      prefersDarkMode\n        ? $(\"html\").attr(\"data-theme\", \"light\")\n        : $(\"html\").attr(\"data-theme\", \"dark\");\n\n    console.info($(\"html\").attr(\"data-theme\"));\n  }\n\n  return (\n    <nav>\n      <ul>\n        <li>\n          <strong>GitHub Notify</strong>\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <a\n            target=\"_blank\"\n            href=\"https://github.com/Muhammed-Rahif/GH-Notify\"\n            rel=\"noreferrer\"\n          >\n            <SiGithub />\n          </a>\n        </li>\n        <li>\n          <a href=\"#dark-mode\" onClick={toggleTheme}>\n            <MdDarkMode />\n          </a>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\n\nfunction HomeContent() {\n  return (\n    <article>\n      {/* Step 1 */}\n      <h3 className=\"mb-0\">Step 1</h3>\n      <h6 className=\"mb-0\">\n        Go to our bot on telegram (<a href=\"https://t.me/Beomax_bot\">@Beomax_bot</a>) and send\n        message <code>/start</code> or <code>/register</code>.\n      </h6>\n      <img className=\"m-1\" src=\"assets/screenshots/step1.png\" alt=\"Step 1\" />\n      <h6>You will get your registration link from there. Click on that link!</h6>\n\n      <hr />\n\n      {/* Step 2 */}\n      <h3 className=\"mb-0\">Step 2</h3>\n      <h6 className=\"mb-0\">Get your GitHub personal access token.</h6>\n      <p>\n        <small>\n          Create a personal access token on GitHub with permission to access your\n          notifications.{\" \"}\n          <img className=\"m-1\" src=\"assets/screenshots/step2.png\" alt=\"Step 2\" />\n        </small>\n      </p>\n\n      <hr />\n    </article>\n  );\n}\n\nexport default HomeContent;\n","import React from \"react\";\nimport HomeContent from \"../components/HomeContent/HomeContent\";\n\nfunction Home() {\n  return (\n    <div>\n      {/* Header section */}\n      <header>\n        <h1 className=\"mb-0\">GitHub Notify</h1>\n        <small>Get your GitHub notifications on telegram..!</small>\n      </header>\n      <hr />\n      <HomeContent />\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\n\nfunction RegisterContent() {\n  return (\n    <article>\n      <form className=\"mb-0\">\n        <label htmlFor=\"email\">GitHub personal access token</label>\n        <input\n          type=\"text\"\n          name=\"personalAccessToken\"\n          placeholder=\"Personal access token\"\n          required\n        />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </article>\n  );\n}\n\nexport default RegisterContent;\n","import React from \"react\";\nimport RegisterContent from \"../components/RegisterContent/RegisterContent\";\n\nfunction Register() {\n  return (\n    <div>\n      {/* Header section */}\n      <header>\n        <h1 className=\"mb-0\">GitHub Notify</h1>\n        <small>Register from here!</small>\n      </header>\n      <hr />\n      <RegisterContent />\n    </div>\n  );\n}\n\nexport default Register;\n","import React from \"react\";\nimport \"./App.css\";\nimport Footer from \"./components/Footer/Footer\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport { BrowserRouter, Route, Routes } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Register from \"./pages/Register\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Navbar />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/register\" element={<Register />} />\n        </Routes>\n      </BrowserRouter>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.unregister();\n"],"sourceRoot":""}